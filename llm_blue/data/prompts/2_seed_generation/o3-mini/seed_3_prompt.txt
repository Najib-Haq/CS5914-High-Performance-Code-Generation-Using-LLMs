You are an expert in high-performance CUDA programming. Generate a CUDA kernel function that performs a sum reduction on an array of integers.

Implement ONLY the kernel function with this exact signature:
__global__ void sumReduction(int *input, int *output, int size)

The kernel should:
- Take an input array of integers, an output array to store block results, and the size of the input array
- Use shared memory appropriately sized with extern __shared__
- Handle array boundaries correctly using the 'size' parameter
- Use tree-based reduction for high performance
- Use synchronization appropriately
- Aim for the best performance across all input sizes (1K to 1B elements)

Here are previous kernel implementations with their performance metrics:

Implementation 1:
```cuda
__global__ void sumReduction(int *input, int *output, int size) {
    /*
    Optimization Strategy:
    1. **Grid-Stride Loop**: Each thread processes multiple elements by looping over the input array with a stride of grid size. This ensures efficient handling of very large arrays (up to 1B elements) without launching excessive blocks.
    2. **Shared Memory Utilization**: Partial sums are stored in shared memory to minimize global memory accesses and leverage fast on-chip memory.
    3. **Loop Unrolling in Reduction**: The reduction within shared memory is unrolled to reduce loop overhead and increase instruction-level parallelism.
    4. **Warp-Level Primitives**: For the final steps of the reduction, `__shfl_down_sync` is used to perform warp-level reductions without requiring synchronization, thus minimizing synchronization overhead.
    5. **Avoiding Bank Conflicts**: Access patterns to shared memory are designed to be coalesced and bank-conflict-free, maximizing memory throughput.
    6. **Early Exit for Small Sizes**: Boundary conditions are handled to ensure that threads do not access out-of-bounds memory, maintaining correctness across all input sizes.
    
    These optimizations collectively enhance performance by maximizing memory bandwidth usage, reducing synchronization costs, and leveraging warp-level parallelism, making the kernel highly efficient for large-scale reductions.
    */

    extern __shared__ int sdata[];

    unsigned int tid = threadIdx.x;
    unsigned int idx = blockIdx.x * blockDim.x + threadIdx.x;
    unsigned int stride = blockDim.x * gridDim.x;

    // Initialize the partial sum for this thread
    int sum = 0;

    // Grid-stride loop to accumulate partial sums
    while (idx < size) {
        sum += input[idx];
        idx += stride;
    }

    // Store the partial sum in shared memory
    sdata[tid] = sum;
    __syncthreads();

    // Perform tree-based reduction in shared memory
    // Unroll the reduction loop for better performance
    for (unsigned int s = blockDim.x / 2; s > 32; s >>= 1) {
        if (tid < s) {
            sdata[tid] += sdata[tid + s];
        }
        __syncthreads();
    }

    // Use warp-level primitives for the final warp
    if (tid < 32) {
        // Reduce within the warp without synchronization
        sdata[tid] += sdata[tid + 32];
        sdata[tid] += sdata[tid + 16];
        sdata[tid] += sdata[tid + 8];
        sdata[tid] += sdata[tid + 4];
        sdata[tid] += sdata[tid + 2];
        sdata[tid] += sdata[tid + 1];
    }

    // Write the block's result to the output array
    if (tid == 0) {
        output[blockIdx.x] = sdata[0];
    }
}
```
Performance:

Implementation 2:
```cuda
__global__ void sumReduction(int *input, int *output, int size) {
    /*
    Optimization Strategy:
    1. **Grid-Stride Loop**: Each thread processes multiple elements by iterating over the input array with a stride equal to the total number of threads in the grid. This ensures efficient utilization of all threads, especially for very large arrays (up to 1B elements).
    
    2. **Per-Warp Reduction using Warp-Level Primitives**: Utilize `__shfl_down_sync` to perform reductions within each warp without requiring shared memory or synchronization. This leverages the fast warp shuffle instructions to minimize latency and avoid shared memory bank conflicts.
    
    3. **Shared Memory for Warp Aggregation**: After per-warp reductions, each warp's partial sum is written to shared memory. A single warp then performs a final reduction on these partial sums. This hierarchical reduction approach reduces the number of synchronization points and memory accesses.
    
    4. **Minimized Synchronization**: By confining most reductions to warp-level operations and limiting shared memory usage to a single step, the kernel minimizes the use of `__syncthreads()`, thereby reducing synchronization overhead.
    
    5. **Efficient Memory Access Patterns**: Accesses to global memory are coalesced through the grid-stride loop, ensuring maximum memory bandwidth utilization. Shared memory accesses are also optimized to be bank-conflict-free by aligning partial sums per warp.
    
    6. **Scalable for All Input Sizes**: The combined use of grid-stride loops and hierarchical reductions ensures that the kernel scales efficiently from small (1K) to very large (1B) input sizes without performance degradation.
    
    These optimizations collectively enhance performance by maximizing computational throughput, minimizing memory latency, and reducing synchronization overhead, making the kernel highly efficient across a wide range of input sizes.
    */

    extern __shared__ int sdata[];

    unsigned int tid = threadIdx.x;
    unsigned int global_tid = blockIdx.x * blockDim.x + threadIdx.x;
    unsigned int gridSize = blockDim.x * gridDim.x;

    // Each thread computes a partial sum using a grid-stride loop
    int sum = 0;
    for (unsigned int idx = global_tid; idx < size; idx += gridSize) {
        sum += input[idx];
    }

    // Perform per-warp reduction using warp-level primitives
    // Assuming warpSize is 32
    for (int offset = warpSize / 2; offset > 0; offset /= 2) {
        sum += __shfl_down_sync(0xFFFFFFFF, sum, offset);
    }

    // The first thread of each warp writes its partial sum to shared memory
    if ((threadIdx.x % warpSize) == 0) {
        sdata[threadIdx.x / warpSize] = sum;
    }

    __syncthreads();

    // Let the first warp handle the reduction of partial sums in shared memory
    if (threadIdx.x < (blockDim.x / warpSize)) {
        sum = (threadIdx.x < (blockDim.x / warpSize)) ? sdata[threadIdx.x] : 0;
        
        // Reduce the partial sums using warp-level primitives
        for (int offset = warpSize / 2; offset > 0; offset /= 2) {
            sum += __shfl_down_sync(0xFFFFFFFF, sum, offset);
        }

        // Write the block's total sum to the output array
        if (threadIdx.x == 0) {
            output[blockIdx.x] = sum;
        }
    }
}
```
Performance:
- Size 1024: 16.4628 ms
- Size 1000000: 0.268224 ms
- Size 1000000000: 5.56582 ms

IMPORTANT: Analyze the strengths and weaknesses of the previous implementations before designing your approach.

Consider implementing a different strategy such as but not limited to:
- Bank-conflict-free memory access patterns
- Sequential addressing vs. strided addressing
- Warp-level primitives like __shfl_down_sync() for warp-level reductions
- Loop unrolling for the reduction phase
- Early exit strategies to reduce unnecessary work
- Minimizing divergent execution paths

Your goal is to create an implementation that performs better than previous ones, especially for large input sizes (1B elements).

First, briefly explain (in comments) your optimization strategy and why you believe it will be effective.

The wrapper code will:
- Call your kernel with blocks and threads: sumReduction<<<blocksPerGrid, threadsPerBlock, threadsPerBlock * sizeof(int)>>>(d_input, d_output, size)
- Handle the final reduction across blocks

Output ONLY the kernel function, starting with __global__ void sumReduction