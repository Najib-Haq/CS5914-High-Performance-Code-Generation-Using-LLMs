Running CUDA Reduction for size: 1000000
==PROF== Connected to process 95996 (/home/najibulhaque/courses/CS5914-High-Performance-Code-Generation-Using-LLMs/manual_red/para.out)
==PROF== Profiling "sumReduction(int *, int *, int)" - 0: 0%....50%....100% - 44 passes
Sum: 1000000
Kernel Execution Time: 5394.06 ms
Result verification: PASSED
==PROF== Disconnected from process 95996
[95996] para.out@127.0.0.1
  sumReduction(int *, int *, int) (977, 1, 1)x(1024, 1, 1), Context 1, Stream 7, Device 0, CC 8.0
    Section: GPU Speed Of Light Throughput
    ----------------------- ------------- ------------
    Metric Name               Metric Unit Metric Value
    ----------------------- ------------- ------------
    DRAM Frequency          cycle/nsecond         1.59
    SM Frequency            cycle/nsecond         1.15
    Elapsed Cycles                  cycle       47,588
    Memory Throughput                   %        20.00
    DRAM Throughput                     %         4.74
    Duration                      usecond        41.41
    L1/TEX Cache Throughput             %        15.87
    L2 Cache Throughput                 %        23.70
    SM Active Cycles                cycle    41,332.77
    Compute (SM) Throughput             %        51.28
    ----------------------- ------------- ------------

    OPT   This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance 
          of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate    
          latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.                 

    Section: GPU Speed Of Light Roofline Chart
    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved 0% of  
          this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide       
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline      
          analysis.                                                                                                     

    Section: Compute Workload Analysis
    -------------------- ----------- ------------
    Metric Name          Metric Unit Metric Value
    -------------------- ----------- ------------
    Executed Ipc Active   inst/cycle         2.35
    Executed Ipc Elapsed  inst/cycle         2.05
    Issue Slots Busy               %        58.95
    Issued Ipc Active     inst/cycle         2.36
    SM Busy                        %        58.95
    -------------------- ----------- ------------

    INF   ALU is the highest-utilized pipeline (42.7%) based on active cycles, taking into account the rates of its     
          different instructions. It executes integer and logic operations. It is well-utilized, but should not be a    
          bottleneck.                                                                                                   

    Section: Memory Workload Analysis
    --------------------------- ------------ ------------
    Metric Name                  Metric Unit Metric Value
    --------------------------- ------------ ------------
    Memory Throughput           Gbyte/second        96.61
    Mem Busy                               %        12.92
    Max Bandwidth                          %        20.00
    L1/TEX Hit Rate                        %        91.60
    L2 Compression Success Rate            %            0
    L2 Compression Ratio                                0
    L2 Hit Rate                            %        79.89
    Mem Pipes Busy                         %        13.40
    --------------------------- ------------ ------------

    Section: Memory Workload Analysis Tables
    OPT   Estimated Speedup: 4.622%                                                                                     
          The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to  
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 2.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory        
          request.                                                                                                      

    Section: Scheduler Statistics
    ---------------------------- ----------- ------------
    Metric Name                  Metric Unit Metric Value
    ---------------------------- ----------- ------------
    One or More Eligible                   %        59.06
    Issued Warp Per Scheduler                        0.59
    No Eligible                            %        40.94
    Active Warps Per Scheduler          warp        14.70
    Eligible Warps Per Scheduler        warp         2.64
    ---------------------------- ----------- ------------

    OPT   Estimated Speedup: 40.94%                                                                                     
          Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 1.7 cycles. This might leave hardware resources underutilized and may lead to     
          less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of   
          14.70 active warps per scheduler, but only an average of 2.64 warps were eligible per cycle. Eligible warps   
          are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible   
          warp results in no instruction being issued and the issue slot remains unused. To increase the number of      
          eligible warps, avoid possible load imbalances due to highly different execution durations per warp.          
          Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.            

    Section: Warp State Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Warp Cycles Per Issued Instruction             cycle        24.90
    Warp Cycles Per Executed Instruction           cycle        24.97
    Avg. Active Threads Per Warp                                27.15
    Avg. Not Predicated Off Threads Per Warp                    23.91
    ---------------------------------------- ----------- ------------

    OPT   Estimated Speedup: 25.27%                                                                                     
          Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is         
          achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early     
          thread completion, and divergent flow control can significantly lower the number of active threads in a warp  
          per cycle. This kernel achieves an average of 27.2 threads being active per cycle. This is further reduced    
          to 23.9 threads per warp due to predication. The compiler may use predication to avoid an actual branch.      
          Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads  
          execute the instructions. Try to avoid different execution paths within a warp when possible.                 

    Section: Instruction Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Avg. Executed Instructions Per Scheduler        inst    24,296.76
    Executed Instructions                           inst   10,496,202
    Avg. Issued Instructions Per Scheduler          inst    24,363.68
    Issued Instructions                             inst   10,525,110
    ---------------------------------------- ----------- ------------

    Section: Launch Statistics
    -------------------------------- --------------- ---------------
    Metric Name                          Metric Unit    Metric Value
    -------------------------------- --------------- ---------------
    Block Size                                                 1,024
    Function Cache Configuration                     CachePreferNone
    Grid Size                                                    977
    Registers Per Thread             register/thread              16
    Shared Memory Configuration Size           Kbyte           16.38
    Driver Shared Memory Per Block       Kbyte/block            1.02
    Dynamic Shared Memory Per Block      Kbyte/block            4.10
    Static Shared Memory Per Block        byte/block               0
    Threads                                   thread       1,000,448
    Waves Per SM                                                4.52
    -------------------------------- --------------- ---------------

    Section: Occupancy
    ------------------------------- ----------- ------------
    Metric Name                     Metric Unit Metric Value
    ------------------------------- ----------- ------------
    Block Limit SM                        block           32
    Block Limit Registers                 block            4
    Block Limit Shared Mem                block            3
    Block Limit Warps                     block            2
    Theoretical Active Warps per SM        warp           64
    Theoretical Occupancy                     %          100
    Achieved Occupancy                        %        91.97
    Achieved Active Warps Per SM           warp        58.86
    ------------------------------- ----------- ------------

    INF   This kernel's theoretical occupancy is not impacted by any block limit.                                       

    Section: Source Counters
    ------------------------- ----------- ------------
    Metric Name               Metric Unit Metric Value
    ------------------------- ----------- ------------
    Branch Instructions Ratio           %         0.13
    Branch Instructions              inst    1,405,293
    Branch Efficiency                   %        77.87
    Avg. Divergent Branches                     431.77
    ------------------------- ----------- ------------

    OPT   Estimated Speedup: 0%                                                                                         
          This kernel has uncoalesced global accesses resulting in a total of 843750 excessive sectors (56% of the      
          total 1499023 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source        
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional      
          information on reducing uncoalesced device memory accesses.                                                   

