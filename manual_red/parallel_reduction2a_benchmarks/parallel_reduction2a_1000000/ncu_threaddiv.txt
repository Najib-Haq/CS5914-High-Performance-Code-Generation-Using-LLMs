Running CUDA Reduction for size: 1000000
==PROF== Connected to process 4113178 (/home/najibulhaque/courses/CS5914-High-Performance-Code-Generation-Using-LLMs/manual_red/para.out)
==PROF== Profiling "sumReduction(int *, int *, int)" - 0: 0%....50%....100% - 44 passes
Sum: 1000000
Kernel Execution Time: 4835.07 ms
Result verification: PASSED
==PROF== Disconnected from process 4113178
[4113178] para.out@127.0.0.1
  sumReduction(int *, int *, int) (977, 1, 1)x(1024, 1, 1), Context 1, Stream 7, Device 0, CC 8.0
    Section: GPU Speed Of Light Throughput
    ----------------------- ------------- ------------
    Metric Name               Metric Unit Metric Value
    ----------------------- ------------- ------------
    DRAM Frequency          cycle/nsecond         1.58
    SM Frequency            cycle/nsecond         1.14
    Elapsed Cycles                  cycle       20,961
    Memory Throughput                   %        10.77
    DRAM Throughput                     %        10.77
    Duration                      usecond        18.37
    L1/TEX Cache Throughput             %         9.51
    L2 Cache Throughput                 %        20.37
    SM Active Cycles                cycle    17,506.38
    Compute (SM) Throughput             %        37.20
    ----------------------- ------------- ------------

    OPT   This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance 
          of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate    
          latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.                 

    Section: GPU Speed Of Light Roofline Chart
    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved 0% of  
          this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide       
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline      
          analysis.                                                                                                     

    Section: Compute Workload Analysis
    -------------------- ----------- ------------
    Metric Name          Metric Unit Metric Value
    -------------------- ----------- ------------
    Executed Ipc Active   inst/cycle         1.76
    Executed Ipc Elapsed  inst/cycle         1.48
    Issue Slots Busy               %        44.38
    Issued Ipc Active     inst/cycle         1.78
    SM Busy                        %        44.38
    -------------------- ----------- ------------

    INF   ALU is the highest-utilized pipeline (21.8%) based on active cycles, taking into account the rates of its     
          different instructions. It executes integer and logic operations. It is well-utilized, but should not be a    
          bottleneck.                                                                                                   

    Section: Memory Workload Analysis
    --------------------------- ------------ ------------
    Metric Name                  Metric Unit Metric Value
    --------------------------- ------------ ------------
    Memory Throughput           Gbyte/second       217.78
    Mem Busy                               %         8.84
    Max Bandwidth                          %        10.77
    L1/TEX Hit Rate                        %        67.12
    L2 Compression Success Rate            %            0
    L2 Compression Ratio                                0
    L2 Hit Rate                            %        52.53
    Mem Pipes Busy                         %        30.48
    --------------------------- ------------ ------------

    Section: Scheduler Statistics
    ---------------------------- ----------- ------------
    Metric Name                  Metric Unit Metric Value
    ---------------------------- ----------- ------------
    One or More Eligible                   %        44.74
    Issued Warp Per Scheduler                        0.45
    No Eligible                            %        55.26
    Active Warps Per Scheduler          warp        13.87
    Eligible Warps Per Scheduler        warp         1.22
    ---------------------------- ----------- ------------

    OPT   Estimated Speedup: 55.26%                                                                                     
          Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 2.2 cycles. This might leave hardware resources underutilized and may lead to     
          less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of   
          13.87 active warps per scheduler, but only an average of 1.22 warps were eligible per cycle. Eligible warps   
          are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible   
          warp results in no instruction being issued and the issue slot remains unused. To increase the number of      
          eligible warps, avoid possible load imbalances due to highly different execution durations per warp.          
          Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.            

    Section: Warp State Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Warp Cycles Per Issued Instruction             cycle        31.00
    Warp Cycles Per Executed Instruction           cycle        31.26
    Avg. Active Threads Per Warp                                31.56
    Avg. Not Predicated Off Threads Per Warp                    30.05
    ---------------------------------------- ----------- ------------

    OPT   Estimated Speedup: 45.45%                                                                                     
          On average, each warp of this kernel spends 14.1 cycles being stalled waiting for sibling warps at a CTA      
          barrier. A high number of warps waiting at a barrier is commonly caused by diverging code paths before a      
          barrier. This causes some warps to wait a long time until other warps reach the synchronization point.        
          Whenever possible, try to divide up the work into blocks of uniform workloads. If the block size is 512       
          threads or greater, consider splitting it into smaller groups. This can increase eligible warps without       
          affecting occupancy, unless shared memory becomes a new occupancy limiter. Also, try to identify which        
          barrier instruction causes the most stalls, and optimize the code executed before that synchronization point  
          first. This stall type represents about 45.4% of the total average of 31.0 cycles between issuing two         
          instructions.                                                                                                 
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on         
          sampling data. The Kernel Profiling Guide                                                                     
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details    
          on each stall reason.                                                                                         

    Section: Instruction Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Avg. Executed Instructions Per Scheduler        inst     7,702.10
    Executed Instructions                           inst    3,327,309
    Avg. Issued Instructions Per Scheduler          inst     7,768.87
    Issued Instructions                             inst    3,356,150
    ---------------------------------------- ----------- ------------

    Section: Launch Statistics
    -------------------------------- --------------- ---------------
    Metric Name                          Metric Unit    Metric Value
    -------------------------------- --------------- ---------------
    Block Size                                                 1,024
    Function Cache Configuration                     CachePreferNone
    Grid Size                                                    977
    Registers Per Thread             register/thread              16
    Shared Memory Configuration Size           Kbyte           16.38
    Driver Shared Memory Per Block       Kbyte/block            1.02
    Dynamic Shared Memory Per Block      Kbyte/block            4.10
    Static Shared Memory Per Block        byte/block               0
    Threads                                   thread       1,000,448
    Waves Per SM                                                4.52
    -------------------------------- --------------- ---------------

    Section: Occupancy
    ------------------------------- ----------- ------------
    Metric Name                     Metric Unit Metric Value
    ------------------------------- ----------- ------------
    Block Limit SM                        block           32
    Block Limit Registers                 block            4
    Block Limit Shared Mem                block            3
    Block Limit Warps                     block            2
    Theoretical Active Warps per SM        warp           64
    Theoretical Occupancy                     %          100
    Achieved Occupancy                        %        86.70
    Achieved Active Warps Per SM           warp        55.49
    ------------------------------- ----------- ------------

    OPT   Estimated Speedup: 13.3%                                                                                      
          This kernel's theoretical occupancy is not impacted by any block limit. The difference between calculated     
          theoretical (100.0%) and measured achieved occupancy (86.7%) can be the result of warp scheduling overheads   
          or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block    
          as well as across blocks of the same kernel. See the CUDA Best Practices Guide                                
          (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on           
          optimizing occupancy.                                                                                         

    Section: Source Counters
    ------------------------- ----------- ------------
    Metric Name               Metric Unit Metric Value
    ------------------------- ----------- ------------
    Branch Instructions Ratio           %         0.32
    Branch Instructions              inst    1,072,298
    Branch Efficiency                   %        99.29
    Avg. Divergent Branches                      11.31
    ------------------------- ----------- ------------

